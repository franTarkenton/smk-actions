name: 'SMK Deploy'
description: 'Deploys SMK docker image to openshift'
inputs:
  OPENSHIFT_SERVER_URL:
    description: 'The url to the openshift instance, build process caches info in oc configmaps'
    required: true
  OPENSHIFT_TOKEN_DEV:
    description: 'The openshift token for the service account access to the dev namespace'
    required: true
  OPENSHIFT_TOKEN_PROD:
    description: 'The openshift token for the service account access to the prod namespace if provided then the deployment is determined to be prod.  You still need to provide the dev token however as information like the image to be deployed are stored in that repository'
    required: false
  GHCR_USER:
    description: 'The github user, required to push docker image to repository packages'
    required: true
  GHCR_TOKEN:
    description: 'the github token, for the user above, again used to push images to github packages'
    required: true
  DOCKER_REGISTRY:
    description: 'the docker registry where the image will be pulled from'
    required: true    
  PR_REVIEWERS:
    description: 'a json list of user names who will get review requests when code associated with a pr has been built and deployed'
    required: true
  PR_MENTIONS:
    description: 'people who should be notified when a dev deployment has been completed'
    required: true
runs:
  using: "composite"
  steps: 
    - name: Login to Dev Openshift
      id: oc-login
      shell: bash
      run: |
        echo ----- OC-LOGIN -----
        # get oc client
        curl https://downloads-openshift-console.apps.silver.devops.gov.bc.ca/amd64/linux/oc.tar -o oc.tar
        tar -xvf oc.tar
        curdir=$(pwd)
        PATH=$curdir:$PATH
        oc login --token=${{ inputs.OPENSHIFT_TOKEN_DEV }} --server=${{ inputs.OPENSHIFT_SERVER_URL }}

    - name: 'Get github repo name'
      id: getRepo
      shell: bash
      #description: 'returns the repo with only the repo name, ie no org attached'
      run: |
        echo git repo ${{ github.repository }}
        repo=$(python3 $GITHUB_ACTION_PATH/getRepo.py =${{ github.repository }})
        echo repo is $repo
        echo ::set-output name=REPONAME::${repo}

    - name: 'Get github user email'
      id: getGithubEmail
      shell: bash
      #description: 'pulls the email of the user that is currently running the action'
      run: |
        echo repo is ${{ steps.getRepo.outputs.REPONAME }}
        EMAIL=$(curl -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token ${{ inputs.GHCR_TOKEN }}" \
                https://api.github.com/users/${{ inputs.GHCR_USER }}| jq '.email')
        echo ::set-output name=EMAIL::${EMAIL}
    
    - name: 'Get docker image registry'
      id: getDockerRegistry
      shell: bash
      run: |
        # the path to the image registry
        # ---------------------------------------------------------
        IMAGE_REGISTRY=${{ inputs.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ steps.getRepo.outputs.REPONAME }}/${{ steps.getRepo.outputs.REPONAME }}
        # needs to be lower case
        IMAGE_REGISTRY=$(echo "$IMAGE_REGISTRY" | tr '[:upper:]' '[:lower:]')
        echo IMAGE_REGISTRY $IMAGE_REGISTRY
        echo ::set-output name=IMAGE_REGISTRY::${IMAGE_REGISTRY}

    - name: 'Get docker image tag'
      id: getDockerImageTag
      shell: bash
      run: |
        IMAGE_TAG_CONFMAP_NAME=${{ steps.getRepo.outputs.REPONAME }}-imagetag-cm
        CONFMAPIMAGETAG=current_image_tag
        echo image name $IMAGE_TAG_CONFMAP_NAME
        IMAGE_TAG=$(oc get configmap $IMAGE_TAG_CONFMAP_NAME  -o json | jq .data.$CONFMAPIMAGETAG)
        echo ::set-output name=DOCKER_VERSION_TAG::${IMAGE_TAG}
        echo image tag $IMAGE_TAG

    - name: 'Get issue url'
      id: getIssueUrl
      shell: bash
      run: |
        # Note: This should be done differently, ideally calculated upstream by the event
        #       that calls this composite action, and then passed to the composite action 
        #       as a parameter
        #
        # extract the  issue url from the configmap $REPONAME-gh-issues-cm
        # ---------------------------------------------------------------------
        ISSUE_CONFIGMAP_NAME=${{ steps.getRepo.outputs.REPONAME }}-gh-issues-cm
        echo configmap name $ISSUE_CONFIGMAP_NAME
        ISSUE_URL=$(oc get configmap $ISSUE_CONFIGMAP_NAME  -o json | jq .data.issueURL | tr -d '"')

        # DEBUGGING
        if [ "$ISSUE_URL" = "null" ]; then
          ISSUE_URL=https://api.github.com/repos/franTarkenton/smk-fap-fcb/issues/1
          echo ISSUE_URL $ISSUE_URL
        fi

        echo ISSUE_URL $ISSUE_URL
        echo ::set-output name=ISSUE_URL::${ISSUE_URL}

    - name: 'Get openshift namespace to deploy to and login'
      id: getOcNamespaceAndLogin
      shell: bash
      run: |
        # a) Reads namespaces-cm from dev deploy
        # b) determines if the token for prod is set
        # c) if so then login to prod using prod token
        # d) verify that logged into correct namespace

        # ENVTAG=prd if inputs.OPENSHIFT_TOKEN_PROD has been set
        ENVTAG=$(python3 $GITHUB_ACTION_PATH/isEnvSet.py ${{ inputs.OPENSHIFT_TOKEN_PROD }})
        # retrieve with ${{ steps.getOcNamespaceAndLogin.outputs.ENVTAG }}
        echo ::set-output name=ENVTAG::${ENVTAG}

        # get the namespace that aligns with tag above
        OC_NAMESPACE_NAMES_CONFIG_MAP=namespaces-cm
        OCTARGETNAMESPACE=$(oc get configmap $OC_NAMESPACE_NAMES_CONFIG_MAP  -o json | jq .data.$ENVTAG | tr -d '"')
        echo namespace $OCTARGETNAMESPACE

        # get current oc namespace
        project=$(oc project --short=true)

        # if current namespace is not the desired namespace then login to the desired namespace
        if [ "$project" != "$OCTARGETNAMESPACE" ]
          then
            echo logging into prod namespace for deployment
            oc login --token=${{ inputs.OPENSHIFT_TOKEN_PROD }} --server=${{ inputs.OPENSHIFT_SERVER_URL }}
        fi

        # finally double check that the desired namespace is what we are currently logged into
        project=$(oc project --short=true)
        if [ "$project" != "$OCTARGETNAMESPACE" ]
          then
              echo exiting, unable to connect to desired namespace $OCTARGETNAMESPACE
              exit 1
        fi
        
    - name: Deploy Helm chart
      id: deployHelm
      shell: bash
      run: |
        # -- retrieving variables calculated in previous steps
        # EMAIL=${{ steps.retrieveimagetag.outputs.EMAIL }}
        # DOCKER_VERSION_TAG=${{ steps.getDockerImageTag.outputs.DOCKER_VERSION_TAG }}
        # IMAGE_REGISTRY=${{ steps.getDockerRegistry.outputs.IMAGE_REGISTRY }}
        REPONAME="${{ steps.getRepo.outputs.REPONAME }}"
        echo reponame is $REPONAME

        GWANSPNAME=$REPONAME-gwa-nsp

        IMAGE_PULL_SECRET_NAME=${{ steps.getRepo.outputs.REPONAME }}-image-pull-secret
        echo IMAGE_PULL_SECRET_NAME $IMAGE_PULL_SECRET_NAME

        # -- debug-- verify the variables have been retrieved and have the values expected
        echo EMAIL ${{ steps.getGithubEmail.outputs.EMAIL }}
        echo REPONAME ${{ steps.getRepo.outputs.REPONAME }}
        echo DOCKER_VERSION_TAG ${{ steps.getDockerImageTag.outputs.DOCKER_VERSION_TAG }}
        echo IMAGE_REGISTRY ${{ steps.getDockerRegistry.outputs.IMAGE_REGISTRY }}

        # potential issue:
        #  - helm chart creates the image pull secret
        #  - tries to use it with the service account
        #  - service account hasn't been granted access
        helm repo add smk-helms https://bcgov.github.io/smk-helms/
        helm upgrade ${{ steps.getRepo.outputs.REPONAME }} smk-helms/smk-app-deploy --install \
           --set app_name=${{ steps.getRepo.outputs.REPONAME }} \
           --set env=dev \
           --set app_image_pull_secret_params.email=${{ steps.getGithubEmail.outputs.EMAIL }} \
           --set kong_config.aps_nsp_name=$GWANSPNAME \
           --set app_image_pull_secret_params.password=$GHCR_TOKEN \
           --set app_image_pull_secret_params.name=$IMAGE_PULL_SECRET_NAME \
           --set app_image_pull_secret_params.imagetag=${{ steps.getDockerImageTag.outputs.DOCKER_VERSION_TAG }} \
           --set app_image_pull_secret_params.registry=${{ steps.getDockerRegistry.outputs.IMAGE_REGISTRY }}

        # verify / report on the image tag that was deployed
        IMAGE_DEPLOYED=$(oc get dc ${{ steps.getRepo.outputs.REPONAME }}-dc -o json | jq '.spec.template.spec.containers[0].image' | tr -d '"' )
        echo IMAGE_DEPLOYED $IMAGE_DEPLOYED
        IMAGE_DEPLOYED_TAG=$(echo ${IMAGE_DEPLOYED} | cut -d':' -f2)
        echo IMAGE_DEPLOYED_TAG $IMAGE_DEPLOYED_TAG

        # finally need to grant the service account access to the the 
        # image_pull_secret that was just created
        serviceAccountName=$(oc whoami | cut -d':' -f4)
        oc patch serviceaccount $serviceAccountName -p '{"imagePullSecrets": [{"name": "'$IMAGE_PULL_SECRET_NAME'"}]}'

    # # ADD THE ROUTE TO THE ISSUE
    - name: Update the github issue
      id: updateGHissue
      shell: bash
      run: |
        
        # THIS SHOULD ONLY RUN IF THE PROD TOKEN IS NULL
        JUNK=test

        # retrieve the route url
        # ---------------------------------------------------------
        oc_route_name=${{ steps.getRepo.outputs.REPONAME }}-rt
        ROUTEPATH=$(oc get route $oc_route_name -o json | jq .spec.host | tr -d '"' )
        ROUTEURL=https://$ROUTEPATH

        # issue url
        # ---------------------------------------------------------
        ISSUE_URL=${{ steps.getIssueUrl.outputs.ISSUE_URL }}
        env=$(python3 $GITHUB_ACTION_PATH/isEnvSet.py ${{ inputs.OPENSHIFT_TOKEN_PROD }})
        if [ $env == "prod" ]; then
          ISSUE_URL=$ISSUE_URL/comments
        fi

        #format reviewers, quotes get stripped when passed to action
        echo pr mentions ${{ inputs.PR_MENTIONS }}
        PR_MENTIONS_JSON=$(python3 $GITHUB_ACTION_PATH/formatJson.py "${{ inputs.PR_MENTIONS }}")
        MENTION_STRING=$(echo $PR_MENTIONS_JSON | jq -rc 'map("@" + .) | .[]' | tr '\n' ',' | sed 's/, */, /g' |  sed 's/, *$//g')

        # ADD COMMENT TO THE ISSUE
        echo 'adding route to the comment for the issue'
        ISSUE_COMMENT="link to demo deployment of your smk based app is \n https://$ROUTEPATH\n\nVerify that it looks good, if so merge the pull request which will trigger a prod deployment, otherwise close the pull request without merging\n\n mentions / notifications: $MENTION_STRING"
        ISSUE_BODY='{"body": "'$ISSUE_COMMENT'"}'

        curl $ISSUE_URL -X POST --header "Authorization: Bearer ${{ inputs.GHCR_TOKEN }}" \
          --header "Accept: application/vnd.github.v3+json" \
          --data-raw "$ISSUE_BODY"
        
    - name: Get GWA CLI
      id: getGWACLI
      shell: bash
      run: |

        # Grabbing the GWA command line tool
        #----------------------------------------------------
        GWA_VERSION=v2.0.3
        GWA_CLI_LINK=https://github.com/bcgov/gwa-cli/releases/download/${GWA_VERSION}/gwa_Linux_x86_64.tgz
        curl -L -O $GWA_CLI_LINK
        gunzip < gwa_Linux_x86_64.tgz | tar -xvf -
        #unzip -p gwa_${GWA_VERSION}_linux_x64.zip > gwa-cli-linux
        mv gwa gwa-cli-linux
        chmod +x gwa-cli-linux

    # - name: Configure Kong Route
    #   id: kongconf
    #   shell: bash
    #   run: |
    #     function getUrl {
    #     python3 - <<END
    #     import json, sys, os
    #     jsonObj = json.loads(os.environ['SERVICES'])
    #     for obj in jsonObj:
    #         if obj['name'] == os.environ['oc_service_name']:
    #             sys.stdout.write(f"https://{obj['env_host']}")
    #     END
    #     }

    #     # setting up a disable for prod for now as service seems a bit flakey atm
    #     env=$(python3 $GITHUB_ACTION_PATH/isEnvSet.py ${{ inputs.OPENSHIFT_TOKEN_PROD }})
    #     echo env is $env
    #     if [ $env != 'foo-prod' ]; then

    #       # get the Reponame from previous step
    #       # ---------------------------------------------------
    #       REPONAME="${{ steps.getRepo.outputs.REPONAME }}"
    #       echo reponame is $REPONAME

    #       # extract kong config info from secret objects
    #       # ---------------------------------------------------
    #       kongSecrets=$(oc get secrets kong-secrets -o json | jq '.data' | jq '.["kong-config"] | @base64d | fromjson')
    #       GWA_CLIENTID=$(echo $kongSecrets | jq '.gwa_client_id' | tr -d '"')
    #       GWA_TOKEN=$(echo $kongSecrets | jq '.apikey' | tr -d '"')
    #       GWA_NAMESPACE=$(echo $kongSecrets | jq '.gwa_namespace' | tr -d '"')
    #       gwa_route_name=${REPONAME}-route
    #       oc_service_name=${REPONAME}-svc
    #       oc_service_port=$(oc get service ${oc_service_name} -o json | jq '.spec.ports[0].port' | tr -d '"')
    #       oc_project=$(oc project --short=true | tr -d '"')

    #       # gwa has test and prod, if its dev, swap to test
    #       #   if dev / test then -T otherwise -P
    #       gwaEnv="${{ steps.getOcNamespaceAndLogin.outputs.ENVTAG }}"
    #       echo gwaEnv $gwaEnv 
    #       gwaSwitch=${gwaEnv/dev/-T}
    #       gwaSwitch=${gwaSwitch/test/-T}
    #       gwaSwitch=${gwaSwitch/prod/-P}

    #       # init the gwa config
    #       # --------------------------------------------------
    #       ./gwa-cli-linux config set namespace $GWA_NAMESPACE
    #       ./gwa-cli-linux init $gwaSwitch \
    #         --api-version=1 \
    #         --namespace=$GWA_NAMESPACE \
    #         --client-id=$GWA_CLIENTID \
    #         --client-secret=$GWA_TOKEN

    #       # create the gwa config
    #       # --------------------------------------------------
    #       python3 $GITHUB_ACTION_PATH/createGWAConfig.py \
    #         --OCService $oc_service_name \
    #         --reponame $REPONAME \
    #         --OCNamespace $oc_project \
    #         --servicePort $oc_service_port \
    #         --kongDomain api.gov.bc.ca \
    #         --GWANamespace $GWA_NAMESPACE \
    #         --GWAenv $gwaEnv > gwa_config.yaml

    #       # publish the gwa config
    #       # --------------------------------------------------
    #       ./gwa-cli-linux pg gwa_config.yaml

    #       # verify the url and output it
    #       # --------------------------------------------------

    #       # authenticate to api
    #       # ---------------------------------------------------
    #       # calculate the auth url based on the env tag
    #       devAuthUrl=https://authz-apps-gov-bc-ca.test.api.gov.bc.ca
    #       prodAuthUrl=https://authz.apps.gov.bc.ca
    #       gwaAuthUrl=${gwaEnv/test/$devAuthUrl}
    #       gwaAuthUrl=${gwaAuthUrl/dev/$devAuthUrl}
    #       gwaAuthUrl=${gwaAuthUrl/prod/$prodAuthUrl}
    #       echo gwaAuthUrl $gwaAuthUrl

    #       # ditto for gwa url
    #       devGWAUrl=https://gwa-api-gov-bc-ca.test.api.gov.bc.ca
    #       prodGWAUrl=https://gwa.api.gov.bc.ca
    #       gwaUrl=${gwaEnv/test/$devGWAUrl}
    #       gwaUrl=${gwaUrl/dev/$devGWAUrl}
    #       gwaUrl=${gwaUrl/prod/$prodGWAUrl}
    #       echo gwaUrl $gwaUrl

    #       # 64bit encode creds
    #       CREDS64=$(echo -ne "${GWA_CLIENTID}:${GWA_TOKEN}" | base64 -w 0 -)

    #       TOKEN=$(curl "$gwaAuthUrl/auth/realms/aps/protocol/openid-connect/token" \
    #         -H 'Accept: application/json, text/plain, */*'  \
    #         -H 'Content-Type: application/x-www-form-urlencoded'  \
    #         -H 'X-Requested-With: XMLHttpRequest'  \
    #         -H "Authorization: Basic ${CREDS64}" \
    #         -H "Origin: $gwaUrl"  \
    #         -H 'Connection: keep-alive'  \
    #         --data-raw 'grant_type=client_credentials' \
    #         | jq '.access_token' | tr -d '"')
          
    #       # get the services in the namespace
    #       SERVICES=$(curl "$gwaUrl/v1/namespaces/${GWA_NAMESPACE}/services" \
    #         -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0' \
    #         -H 'Accept: */*' \
    #         -H 'Accept-Language: en-US,en;q=0.5' --compressed \
    #         -H "Authorization: Bearer ${TOKEN}" \
    #         -H 'Connection: keep-alive' )
    #       echo SERVICES $SERVICES

    #       # extract the url associated with the service
    #       export oc_service_name
    #       echo oc_service_name $oc_service_name
    #       export SERVICES
    #       VANITY_URL=$(getUrl)
    #       echo vanity url $VANITY_URL
    #       echo ::set-output name=VANITY_URL::${VANITY_URL}
    #     else
    #       echo not running for prod atm
    #     fi

    # # # ADD THE GWA ROUTE TO THE ISSUE
    # - name: Update the github issue with the GWA Route
    #   id: addGWARouteToIssue
    #   shell: bash
    #   run: |
    #     env=$(python3 $GITHUB_ACTION_PATH/isEnvSet.py ${{ inputs.OPENSHIFT_TOKEN_PROD }})
    #     echo env is $env
    #     if [ $env != 'foo-prod' ]; then
    #       PR_MENTIONS_JSON=$(python3 $GITHUB_ACTION_PATH/formatJson.py "${{ inputs.PR_MENTIONS }}")
    #       MENTION_STRING=$(echo $PR_MENTIONS_JSON | jq -rc 'map("@" + .) | .[]' | tr '\n' ',' | sed 's/, */, /g' |  sed 's/, *$//g')

    #       # vanityurl: steps.kongconf.outputs.VANITY_URL
    #       # issue_url: steps.getIssueUrl.outputs.ISSUE_URL
    #       ISSUE_URL=${{ steps.getIssueUrl.outputs.ISSUE_URL }}/comments
    #       ISSUE_COMMENT="The Vanity URL for the ${{ steps.getOcNamespaceAndLogin.outputs.ENVTAG }} deploy is ${{ steps.kongconf.outputs.VANITY_URL }}\n \n\nIf this is a dev deploy,  verify that it looks good, then merge the pull request to trigger prod deployment.\n\n If this is a prod deployment, view your prod deploy at the url above :)\n\n mentions / notifications: $MENTION_STRING"
    #       ISSUE_BODY='{"body": "'$ISSUE_COMMENT'"}'

    #       curl $ISSUE_URL -X POST --header "Authorization: Bearer ${{ inputs.GHCR_TOKEN }}" \
    #         --header "Accept: application/vnd.github.v3+json" \
    #         --data-raw "$ISSUE_BODY"
          
    #       echo ::set-output name=ISSUE_URL::${ISSUE_URL}
    #     else
    #       echo not running for prod atm
    #     fi

